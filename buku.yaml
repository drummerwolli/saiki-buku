SenzaInfo:
  StackName: buku
  Parameters:
    - DockerImage:
        Description: "Docker image path with version tag of buku."
    - ScalyrAccountKey:
        Description: "Scalyr Account Key, necessary for Logging."
    - ZookeeperStackName:
        Description: "Which ZooKeeper Stack should be used?"
    - ZookeeperPrefix:
        Description: "Which ZooKeeper node should be used as prefix?"
    - HostedZone:
        Description: "The generic Hosted Zone for your AWS account"
SenzaComponents:
  - Configuration:
      Type: Senza::StupsAutoConfiguration
  - AppServer:
      Type: Senza::TaupageAutoScalingGroup
      AutoScaling:
        Minimum: 3
        Maximum: 3
        MetricType: CPU
      HealthCheckType: EC2
      ElasticLoadBalancer: AppLoadBalancer
      LoadBalancerNames:
        - Ref: AppLoadBalancer
      BlockDeviceMappings:
        - DeviceName: /dev/xvdk
          Ebs:
            VolumeSize: 500
            VolumeType: gp2
      InstanceType: c4.xlarge
      SecurityGroups:
        - "Fn::GetAtt" : [ "BukuSecGroup" , "GroupId" ]
      IamRoles:
        - Ref: BukuRole
      TaupageConfig:
        runtime: Docker
        source: "{{Arguments.DockerImage}}"
        ports:
          9092: 9092
          8004: 8004
          8080: 8080
          8778: 8778
        scalyr_account_key: '{{Arguments.ScalyrAccountKey}}'
        networking: host
        enhanced_cloudwatch_metrics: true
        application_logrotate_size: 100M
        application_logrotate_rotate: 4
        environment:
          EXHIBITOR_HOST: "{{Arguments.ZookeeperStackName}}.{{Arguments.HostedZone}}"
          ZOOKEEPER_STACK_NAME: "{{Arguments.ZookeeperStackName}}"
          ZOOKEEPER_PREFIX: "{{Arguments.ZookeeperPrefix}}"
          JMX_PORT: 8004
          REASSIGN_PARTITIONS: "yes"
        mounts:
          /data:
            partition: /dev/xvdk
            filesystem: ext4
            erase_on_boot: true
            options: noatime,nodiratime,nobarrier
Resources:
  BukuRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AmazonEC2MetadataReadAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: ec2:Describe*
            Resource: "*"
          - Effect: Allow
            Action: elasticloadbalancing:Describe*
            Resource: "*"
      - PolicyName: WriteZMONMetricsIntoCloudWatch
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: "cloudwatch:PutMetricData"
            Resource: "*"
  BukuSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Buku Appliance Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8004
          ToPort: 8004
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8778
          ToPort: 8778
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: "0.0.0.0/0"
  Route53WeightedDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: "{{Arguments.HostedZone}}"
      Name: "{{SenzaInfo.StackName}}.{{Arguments.HostedZone}}"
      SetIdentifier: "{{SenzaInfo.StackName}}-{{Arguments.version}}"
      Type: CNAME
      TTL: 20
      Weight: 0
      ResourceRecords:
        - Fn::GetAtt:
           - AppLoadBalancer
           - DNSName
  Route53VersionedDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: "{{Arguments.HostedZone}}"
      Name: "{{SenzaInfo.StackName}}-{{Arguments.version}}.{{Arguments.HostedZone}}"
      Type: CNAME
      TTL: 20
      ResourceRecords:
        - Fn::GetAtt:
           - AppLoadBalancer
           - DNSName
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: "{{SenzaInfo.StackName}}-{{Arguments.version}}"
      CrossZone: true
      HealthCheck:
        Target: TCP:9092
        Timeout: 5
        Interval: 30
        UnhealthyThreshold: 2
        HealthyThreshold: 3
      Listeners:
        - InstancePort: 9092
          LoadBalancerPort: 9092
          Protocol: TCP
          InstanceProtocol: TCP
        - InstancePort: 8004
          LoadBalancerPort: 8004
          Protocol: TCP
          InstanceProtocol: TCP
        - InstancePort: 8080
          LoadBalancerPort: 8080
          Protocol: TCP
          InstanceProtocol: TCP
        - InstancePort: 8778
          LoadBalancerPort: 8778
          Protocol: TCP
          InstanceProtocol: TCP
      SecurityGroups:
        - "Fn::GetAtt" : [ "BukuSecGroup" , "GroupId" ]
      Scheme: internal
      Subnets:
        Fn::FindInMap:
          - LoadBalancerSubnets
          - Ref: AWS::Region
          - Subnets
